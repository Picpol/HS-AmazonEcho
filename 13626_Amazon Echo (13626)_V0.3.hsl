# -*- coding: iso8859-1 -*-
## -----------------------------------------------------
## Amazon Echo (13626)   ### V0.3
##
## erstellt am: 2017-02-19 16:20
## -----------------------------------------------------
## Copyright © 2016, Werner Lindbüchl, All rights reserved.
##
## This program is free software; you can redistribute it and/or modify it under the terms
## of the GNU General Public License as published by the Free Software Foundation; either
## version 3 of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
## without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
## See the GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along with this program;
## if not, see <http://www.gnu.de/documents/gpl-3.0.de.html>.

## -- 
## --  

#5000|"Text"|Remanent(1/0)|Anz.Eingänge|.n.|Anzahl Ausgänge|.n.|.n.
5000|"Weitere Bausteine\Amazon Echo (13626)_V0.3"|1|5|"E1 Https-Server Start/Stop"|"E2 Https-Server Port"|"E3 Access Token"|"E4 Loglevel 0=Off, 1=Error, 2=Warn, 3=Info, 4=Debug"|"E5 Clear Log"|1|"A1 Unauthorized Access Counter"|"V0.3"

#5001|Anzahl Eingänge|Ausgänge|Offset|Speicher|Berechnung bei Start
5001|5|1|1|6|1

# Eingaenge
#5002|Index Eingang|Default Wert|0=numerisch 1=alphanummerisch
5002|1|1|0	#* E1 Https-Server Start/Stop 
5002|2|0|0	#* E2 Https-Server Port 
5002|3|0|1	#* E3 Access Token 
5002|4|2|0	#* E4 LogLevel 
5002|5|0|0	#* E5 Clear Log 

# Speicher
#5003|Speicher|Initwert|Remanent
5003|1||0		  #* 
5003|2|""|1		  #*  Bytes - 10000
5003|3|""|1		  #*  Bytes - 20000
5003|4|""|1		  #*  Bytes - 30000
5003|5|""|1		  #*  Bytes - 40000
5003|6|""|1		  #*  Bytes - 50000

# Ausgaenge
#5004|ausgang|Initwert|runden binär (0/1)|typ (1-send/2-sbc)|0=numerisch 1=alphanummerisch
5004|1|0|0|1|0 #* A1 Unauthorized Access Counter

#################################################

5012|0|"EI"|"eval(compile(__import__('base64').decodestring(''),'<13626_Amazon Echo (13626)>','exec'))"|""|0|0|0|0
## MD5 der Formelzeile: e92abd630cded7868238b1f6ab4ad783
### Klasse AmazonEcho
################################
## Quelltext nicht Öffentlich ##
################################




#5012|abbruch bei bed. (0/1)|bedingung|formel|zeit|pin-ausgang|pin-offset|pin-speicher|pin-neg.ausgang
## Klasse auf SN1 
5012|0|"EI"|"AmazonEcho(locals())"|"AmazonEcho.DELAY"|0|1|1|0
5012|0|"OC[1]"|"SN[1].init()"|""|0|0|0|0
5012|0|"EC[1] and EN[1]"|"SN[1].start()"|""|0|0|0|0
5012|0|"EC[1] and not EN[1]"|"SN[1].stop()"|""|0|0|0|0
5012|0|"EC[4]"|"SN[1].setLogLevel(EN[4])"|""|0|0|0|0
5012|0|"EC[5] and EN[5]"|"SN[1].clearLog()"|""|0|0|0|0



